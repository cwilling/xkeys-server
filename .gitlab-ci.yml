# Official framework image. Look for the different tagged releases at:
# /https://hub.docker.com/r/library/node/tags
default:
  image: node:lts

variables:
  PACKAGE_VERSION: "0.9.10"
  LINUX_AMD64_INSTALLER: "xkeys-server-${PACKAGE_VERSION}_amd64.deb"
  LINUX_RPM_INSTALLER: "xkeys-server-${PACKAGE_VERSION}-1.x86_64.rpm"
  MACOS_INSTALLER: "xkeys-server-macos-installer-${PACKAGE_VERSION}-x86_64.pkg"
  BEAGLEBONE_BLACK_INSTALLER: "xkeys-server-bbb-${PACKAGE_VERSION}_armhf.deb"
  RASPI_32_INSTALLER: "xkeys-server-${PACKAGE_VERSION}_armhf.deb"
  RASPI_64_INSTALLER: "xkeys-server-${PACKAGE_VERSION}_arm64.deb"
  WINDOWS_INSTALLER: "xkeys-server-installer-${PACKAGE_VERSION}.exe"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/xkeys-server/${PACKAGE_VERSION}"

.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

.macos_saas_runners:
  tags:
    - shared-macos-amd64
  image: macos-11-xcode-12


# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
#services:


stages:
  - nothing
  - docker_build
  - test
  - package
  - upload

.do_nothing:
  stage: nothing
  script:
    echo
  interruptible: true


# Docker container for packaging RPMs.
.docker_build_rpm:
  stage: docker_build
  image: docker:20.10.11
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - cat build/rpm/Dockerfile | docker build -t registry.gitlab.com/chris.willing/xkeys-server:rocky8.5 -
    - docker push registry.gitlab.com/chris.willing/xkeys-server:rocky8.5

# Docker container image for RasPi 64bit packaging
.docker_build_arm64v8:
  stage: docker_build
  image: docker:20.10.11
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - cat build/raspi/Dockerfile.arm64v8 | docker build -t registry.gitlab.com/chris.willing/xkeys-server:bullseye-arm64 -
    - docker push registry.gitlab.com/chris.willing/xkeys-server:bullseye-arm64

# Docker container for RASPI 32bit packaging
.docker_build_arm32v7:
  stage: docker_build
  image: docker:20.10.11
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - cat build/raspi/Dockerfile.arm32v7 | docker build -t registry.gitlab.com/chris.willing/xkeys-server:bullseye-arm32 -
    - docker push registry.gitlab.com/chris.willing/xkeys-server:bullseye-arm32

# Docker container for Beaglebone Black 32bit packaging
# (using default Debian buster base)
docker_build_bbblack_arm32v7:
  stage: docker_build
  image: docker:20.10.11
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - cat build/bbblack/Dockerfile | docker build -t registry.gitlab.com/chris.willing/xkeys-server:buster-arm32 -
    - docker push registry.gitlab.com/chris.willing/xkeys-server:buster-arm32


# Generic test LTS nodejs
.test_lts:
  stage: test
  except:
    changes:
      - "*.md"
      - "./**/*.md"
      - "./**/**/*.md"
  before_script:
    apt-get update -qq && apt-get install -y -qq libudev-dev libusb-1.0-0
  script:
    - npm install
    - cd build/deb
    - npx pkg -t node16-linux-x64 --out-path application ../..
    - ls -l application/
    - ./application/xkeys-server test
  interruptible: true


# Package with LTS nodejs
.package_deb_lts:
  stage: package
  image: node:lts
  before_script:
    apt-get update -qq && apt-get install -y -qq libudev-dev libusb-1.0-0
  script:
    - npm install
    - cd build/deb
    - npx pkg -t node16-linux-x64 --out-path application ../..
    - ls -l application/
    - ./make-deb
  interruptible: true
  artifacts:
    paths:
      - build/deb/${LINUX_AMD64_INSTALLER}

# Package rpm
.package_rpm:
  stage: package
  image: registry.gitlab.com/chris.willing/xkeys-server:rocky8.5
  script:
    - npm install
    - cd build/rpm
    - ./make-rpm
    - cp -p ~/rpmbuild/RPMS/x86_64/xkeys-server-${PACKAGE_VERSION}-1.x86_64.rpm .
    - ls -l ${LINUX_RPM_INSTALLER}
  interruptible: true
  artifacts:
    paths:
      - build/rpm/${LINUX_RPM_INSTALLER}


# Package RasPi
.package_raspi:
  stage: package
  image: registry.gitlab.com/chris.willing/xkeys-server:bullseye-arm64
  script:
    - npm install
    - cd build/raspi
    - ./make-raspi
    - ls -l ${RASPI_64_INSTALLER}
  interruptible: true
  artifacts:
    paths:
      - build/raspi/${RASPI_64_INSTALLER}

# Package 32bit RasPi
.package_raspi_32:
  stage: package
  image: registry.gitlab.com/chris.willing/xkeys-server:bullseye-arm32
  script:
    - mkdir -p ~/.pkg-cache/v2.6
    - cd ~/.pkg-cache/v2.6
    - wget https://github.com/yao-pkg/pkg-binaries/releases/download/node12/fetched-v12.18.1-linux-armv7
    - ls -l
    - cd -
    - npm install --save-dev pkg@4.5.1
    - cd build/raspi
    - ./make-raspi
    - ls -l ${RASPI_32_INSTALLER}
  interruptible: true
  artifacts:
    paths:
      - build/raspi/${RASPI_32_INSTALLER}

# Package 32bit Beaglebone Black
.package_beaglebone_black:
  stage: package
  image: registry.gitlab.com/chris.willing/xkeys-server:buster-arm32
  script:
    - mkdir -p ~/.pkg-cache/v2.6
    - cd ~/.pkg-cache/v2.6
    - wget https://github.com/yao-pkg/pkg-binaries/releases/download/v1.0.0/fetched-v10.15.3-linux-armv7
    - ls -l
    - cd -
    - npm config set strict-ssl false
    - npm install --save-dev pkg@4.5.1
    - cd build/bbblack
    - ./make-beagleboneblack
    - ls -l ${BEAGLEBONE_BLACK_INSTALLER}
  interruptible: true
  artifacts:
    paths:
      - build/raspi/${BEAGLEBONE_BLACK_INSTALLER}



# Test Windows
# - NodeJS is preinstalled
.test_windows:
  extends:
  - .shared_windows_runners
  stage: test
  except:
    changes:
      - "*.md"
      - "./**/*.md"
      - "./**/**/*.md"
  script:
    - npm install
    - node .\scripts\xkeys-server.js test
  interruptible: true

.package_windows:
  extends:
  - .shared_windows_runners
  stage: package
  before_script:
    - choco install --confirm nsis
  script:
    - npm install
    - cd build/windows
    - npx pkg -t node12-win-x64 --out-path application ../..
    - '& "C:\\Program Files (x86)\\NSIS\\makensis.exe" xkeys-server-installer.nsi'
    - ls ${WINDOWS_INSTALLER}
  interruptible: true
  artifacts:
    paths:
      - build\\windows\\${WINDOWS_INSTALLER}

# We can't build macos packages here yet
# so fetch and upload a package we prepared manually
.upload_remotes:
  image: curlimages/curl:latest
  stage: upload
  rules:
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - mkdir -p build/macos
    - cd build/macos
    - wget https://chriswilling.com/Xkeys/${MACOS_INSTALLER}
    - ls ${MACOS_INSTALLER}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${MACOS_INSTALLER} ${PACKAGE_REGISTRY_URL}/${MACOS_INSTALLER}
  artifacts:
    paths:
      - build/macos/${MACOS_INSTALLER}


# Test macOS (only available in beta program)
#test_macos:
#  stage: test
#  extends:
#    - .macos_saas_runners
#  stage: test
#  except:
#    changes:
#      - "*.md"
#      - "./**/*.md"
#      - "./**/**/*.md"
#  script:
#    - npm install
#    - ./scripts/xkeys-server.js test
#  interruptible: true

.upload_deb:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/deb/${LINUX_AMD64_INSTALLER} ${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_INSTALLER}

.upload_rpm:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/rpm/${LINUX_RPM_INSTALLER} ${PACKAGE_REGISTRY_URL}/${LINUX_RPM_INSTALLER}

.upload_raspi:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/raspi/${RASPI_64_INSTALLER} ${PACKAGE_REGISTRY_URL}/${RASPI_64_INSTALLER}

.upload_raspi_32:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/raspi/${RASPI_32_INSTALLER} ${PACKAGE_REGISTRY_URL}/${RASPI_32_INSTALLER}


.upload_windows:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_DEPLOY_FREEZE == null
  script:
    - ls build/windows/${WINDOWS_INSTALLER}
    - echo "Hello World!"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/windows/${WINDOWS_INSTALLER} ${PACKAGE_REGISTRY_URL}/${WINDOWS_INSTALLER}

